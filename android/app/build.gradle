def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(rootProject.file("keystore.properties")))

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 28
    lintOptions {
        checkReleaseBuilds false
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId extProperties.applicationId
        manifestPlaceholders.appName = extProperties.applicationName
        minSdkVersion extProperties.minSdkVersion
        targetSdkVersion extProperties.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        development {
            storeFile file(keystoreProperties["DEV_STORE_FILE"])
            storePassword keystoreProperties["DEV_STORE_PASSWORD"]
            keyAlias keystoreProperties["DEV_KEY_ALIAS"]
            keyPassword keystoreProperties["DEV_KEY_PASSWORD"]
        }

        staging {
            storeFile file(keystoreProperties["STAGING_STORE_FILE"])
            storePassword keystoreProperties["STAGING_STORE_PASSWORD"]
            keyAlias keystoreProperties["STAGING_KEY_ALIAS"]
            keyPassword keystoreProperties["STAGING_KEY_PASSWORD"]
        }

        production {
            storeFile file(keystoreProperties["PRODUCTION_STORE_FILE"])
            storePassword keystoreProperties["PRODUCTION_STORE_PASSWORD"]
            keyAlias keystoreProperties["PRODUCTION_KEY_ALIAS"]
            keyPassword keystoreProperties["PRODUCTION_KEY_PASSWORD"]
        }
    }

    buildTypes {
        release {

        }

        debug {

        }
    }

    flavorDimensions "app"

    productFlavors {
        development {
            dimension "app"
            manifestPlaceholders.appNameSuffix = " Dev"
            applicationIdSuffix ".development"
            signingConfig signingConfigs.development
        }

        staging {
            dimension "app"
            manifestPlaceholders.appNameSuffix = " Staging"
            applicationIdSuffix ".staging"
            signingConfig signingConfigs.staging
        }

        production {
            dimension "app"
            manifestPlaceholders.appNameSuffix = ""
            signingConfig signingConfigs.production
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
